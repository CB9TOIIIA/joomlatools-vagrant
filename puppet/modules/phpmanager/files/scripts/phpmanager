#!/bin/bash

# phpmanager
# A script to switch between different PHP versions

# Global variables:
VERSION=0.1
BASENAME=$(basename $0)
SOURCE=/usr/local/src/php
TARGET=/opt/php/

VERSIONS=()

# Print out usage
usage() {
    echo "phpmanager v$VERSION"
	echo "Usage: "
	echo "  $BASENAME list                  -- List all available PHP versions."
	echo "  $BASENAME install <version>     -- Installs selected PHP version. Will build from source if version does not exist yet."
	echo "  $BASENAME build <version>       -- Attempts to build PHP version from source."
	echo "  $BASENAME --help|-h             -- Show help"
	echo "Configuration: "
	echo " PHP Source directory: $SOURCE"
	echo " Target directory: $TARGET"
	exit 1
}

# Get the list of available versions
command_list() {
    cd $SOURCE

    # Fetch the list of available PHP versions from the Git repo
    command_getversions

    # Print out each element of the array on a separate line
    STRING=$(printf "%s\n" "${VERSIONS[@]}")

    # Display the versions in columns
    printf "%20s  %20s  %20s  %20s  %20s\n" $STRING
}

# Install PHP version
command_install() {
    VERSION=$1

    if [[ ! -d /opt/php/$VERSION ]] ; then
        echo "$VERSION does not exist, attempting to build .."
        command_build $VERSION
    fi

    PATH=/usr/local/php/${VERSION}/bin:$PATH
    echo $PATH
}

# Build version
command_build() {
    VERSION=$1

    if [[ -z $VERSION ]] ; then
        echo "No PHP version given"
        usage
    fi;

    cd $SOURCE

    # Make sure the tag exists
    if ! git rev-parse $VERSION >/dev/null 2>&1
    then
        echo "$VERSION version not found"
        usage
    fi

    # Setup the PATH to include the required build tools
    export PATH=/opt/bison-2.2/bin:/opt/flex-2.5.4/bin:$PATH

    # Clean-up and checkout the tag
    make clean
    rm -rf configure
    ./vcsclean

    git reset --hard --quiet
    git clean -d -x -f --quiet

    git checkout $VERSION

    # Run configure
    ./buildconf --force

    OPTIONS="--enable-spl  \
             --with-xsl --with-curl"

    ./configure --prefix=/opt/php/${VERSION} ${OPTIONS}

    if [[ $? -ne 0 ]] ; then
        echo "ERROR: Configure failed. Exiting"
        exit 1
    fi

    make
    if [[ $? -ne 0 ]] ; then
        echo "ERROR: Failed to build PHP $VERSION. Exiting"
        exit 1
    fi

    sudo make install
    if [[ $? -ne 0 ]] ; then
        echo "ERROR: make install failed. Exiting"
        exit 1
    fi
}

# Get the available PHP tags
command_getversions() {
    cd $SOURCE

    git fetch origin --quiet
    git fetch origin --tags --quiet

    TAGS=()
    eval "$(git for-each-ref --shell --format='TAGS+=(%(refname))' refs/tags/)"
    for TAG in "${TAGS[@]}"; do
        # Only list PHP versions greater than or equal to 5.2
        PATTERN="refs/tags/php-[5-9]\.[2-9]"
        if [[ $TAG =~ $PATTERN ]]; then
            VERSIONS+=(${TAG/refs\/tags\//})
        fi;
    done

    # Sort the tags
    VERSIONS=(
        $(for el in "${VERSIONS[@]}"
            do
                echo "$el"
            done | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n
        )
    )
}

# Start executing :

# Determine the command and execute
SUBCOMMAND=$1
case $SUBCOMMAND in
    "" | "-h" | "--help")
        usage
        ;;
    *)
        shift
        command_${SUBCOMMAND} $@
        if [ $? = 127 ]; then
            echo "Error: '$SUBCOMMAND' is not a known command!" >&2
            usage
        fi
        ;;
esac