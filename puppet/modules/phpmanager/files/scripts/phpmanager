#!/bin/bash
##
# Joomlatools Composer plugin - https://github.com/joomlatools/joomla-composer
#
# @copyright	Copyright (C) 2011 - 2014 Johan Janssens and Timble CVBA. (http://www.timble.net)
# @license		MPL 2.0 <http://www.mozilla.org/MPL/2.0/>
# @link		    http://github.com/joomlatools/joomla-vagrant for the canonical source repository
##

##
# phpmanager
# A script to easily switch between different PHP versions
#
# @author   Steven Rombauts <https://github.com/stevenrombauts>
#
##

# Global variables:
VERSION=0.1
BASENAME=$(basename $0)
SOURCE=/usr/local/src/php
TARGET=/opt/php/

VERSIONS=()
BINARIES=('php' 'pear' 'pecl' 'phar' 'phing' 'php-config' 'phpize')

# Print out usage
usage() {
    echo "phpmanager v$VERSION"
	echo "Usage: "
	echo "  $BASENAME list                  -- List all available PHP versions."
	echo "  $BASENAME install <version>     -- Installs selected PHP version. Will build from source if version does not exist yet."
	echo "  $BASENAME build <version>       -- Attempts to build PHP version from source."
	echo "  $BASENAME restore               -- Put the original binaries and Apache module back in place."
	echo "  $BASENAME --help|-h             -- Show help"
	echo "Configuration: "
	echo " PHP Source directory: $SOURCE"
	echo " Target directory: $TARGET"
	exit 1
}

# Get the list of available versions
command_list() {
    cd $SOURCE

    # Fetch the list of available PHP versions from the Git repo
    sub_getversions

    # Print out each element of the array on a separate line
    STRING=$(printf "%s\n" "${VERSIONS[@]}")

    # Display the versions in columns
    printf "%20s  %20s  %20s  %20s  %20s\n" $STRING
}

# Install PHP version
command_install() {
    VERSION=$1

    if [[ ${VERSION:0:4} != "php-" ]] ; then
        VERSION="php-${VERSION}"
    fi

    if [[ ! -d "/opt/php/$VERSION" ]] ; then
        echo "$VERSION does not exist, attempting to build .."
        command_build $VERSION
    fi

    # Install the binaries
    for BINARY in "${BINARIES[@]}"
    do
        # Check if we've already made backups
        if [ ! -f "/usr/bin/${BINARY}.original" ] ; then
            sudo mv "/usr/bin/${BINARY}" "/usr/bin/${BINARY}.original"
        fi

        # Now symlink the new binaries
        if [ -f "/opt/php/$VERSION/bin/$BINARY" ] ; then
            sudo ln -fs "/opt/php/$VERSION/bin/$BINARY" "/usr/bin/$BINARY"
        elif [ -f "/usr/bin/$BINARY" ] ; then
            sudo rm "/usr/bin/$BINARY"
        fi
    done

    # Change the Apache module
    if [ ! -f "/usr/lib/apache2/modules/libphp5.so.original" ] ; then
        sudo cp "/usr/lib/apache2/modules/libphp5.so" "/usr/lib/apache2/modules/libphp5.so.original"
    fi

    sudo cp "/opt/php/${VERSION}/libphp5.so" "/usr/lib/apache2/modules/libphp5.so"
    sudo /etc/init.d/apache2 restart

    echo "Installed binaries and Apache module. PHP version is now: "
    php -v
}

# Build version
command_build() {
    VERSION=$1

    if [[ -z $VERSION ]] ; then
        echo "No PHP version given"
        usage
    fi;

    if [[ ${VERSION:0:4} != "php-" ]] ; then
        VERSION="php-${VERSION}"
    fi

    SHORT=$(sub_getshortversion $VERSION)

    # Fetch the list of available PHP versions from the Git repo
    sub_getversions

    in_array $VERSION
    if [[ $? != 0 ]] ; then
        echo "Illegal version $VERSION"
        exit 1
    fi

    cd $SOURCE

    # Make sure the tag exists
    if [ ! git rev-parse "$VERSION" >/dev/null 2>&1 ] ; then
        echo "$VERSION version not found"
        usage
    fi

    # Clean-up and checkout the tag
    make clean
    rm -rf configure
    ./vcsclean

    git reset --hard --quiet
    git clean -d -x -f --quiet

    git checkout $VERSION

    # Setup the PATH to include legacy build tools if needed
    if [[ $SHORT -le 5360 ]] ; then
        export PATH=/opt/bison-2.2/bin:/opt/flex-2.5.4/bin:$PATH
    fi

    # Run configure
    ./buildconf --force

    OPTIONS=$(sub_getoptions $SHORT)

    ./configure --prefix=/opt/php/${VERSION} ${OPTIONS}

    if [[ $? -ne 0 ]] ; then
        echo "ERROR: Configure failed. Exiting"
        exit 1
    fi

    # Before building, backup the libphp5.so file as "make install" will overwrite it automatically
    sudo cp /usr/lib/apache2/modules/libphp5.so /usr/lib/apache2/modules/libphp5.so.bak

    # Start the build
    make
    if [[ $? -ne 0 ]] ; then
        echo "ERROR: Failed to build PHP $VERSION. Exiting"
        exit 1
    fi

    sudo make install
    if [[ $? -ne 0 ]] ; then
        echo "ERROR: make install failed. Exiting"
        exit 1
    fi

    # Store our newly built module and put the original libphp5.so module back
    sudo mv /usr/lib/apache2/modules/libphp5.so "/opt/php/${VERSION}/libphp5.so"
    sudo mv /usr/lib/apache2/modules/libphp5.so.bak /usr/lib/apache2/modules/libphp5.so
}

# Restore the original PHP binaries and Apache module
command_restore() {
    for BINARY in "${BINARIES[@]}"
    do
        # Remove the symlink
        if [ -L "/usr/bin/${BINARY}" ] ; then
            sudo rm "/usr/bin/${BINARY}"
        fi

        sudo mv "/usr/bin/${BINARY}.original" "/usr/bin/${BINARY}"
    done

    if [ -f "/usr/lib/apache2/modules/libphp5.so" ] ; then
        sudo rm "/usr/lib/apache2/modules/libphp5.so"
    fi

    sudo mv "/usr/lib/apache2/modules/libphp5.so.original" "/usr/lib/apache2/modules/libphp5.so"

    sudo /etc/init.d/apache2 restart

    echo "Restored PHP, version is now:"
    php -v
}

# Build the configure string
sub_getoptions() {
    VERSION=$1

    # Default options :
    OPTIONS="--enable-calendar \
              --enable-cli \
              --enable-exif \
              --enable-ftp \
              --enable-mbstring \
              --enable-soap \
              --enable-sockets \
              --enable-zip \
              --with-apxs2=/usr/bin/apxs2 \
              --with-bz2 \
              --with-curl \
              --with-gd --with-jpeg-dir --with-png-dir --enable-gd-native-ttf --with-freetype-dir \
              --with-iconv \
              --with-libdir=lib/x86_64-linux-gnu \
              --with-mcrypt \
              --with-pcre-regex \
              --with-readline \
              --with-xmlrpc
              --with-xsl \
              --with-zlib"

    # Build the mysql configuration string
    MYSQL=""
    if [[ "$VERSION" -lt 5213 ]] ; then
        CFG="/opt/mysql-5.1.73/bin/mysql_config"
	    MYSQL="--with-mysql=/opt/mysql-5.1.73 --with-pdo-mysql=${CFG}"
    elif [[ "$VERSION" -lt 5300 ]] ; then
        CFG=$(which mysql_config)
        MYSQL="--with-mysql --with-mysqli=${CFG} --with-pdo-mysql=${CFG}"
    else
        MYSQL="--with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd"
    fi
    OPTIONS="$OPTIONS $MYSQL"

    # Add some legacy options
    if [[ "$VERSION" -lt 5300 ]] ; then
        OPTIONS="$OPTIONS --enable-spl --with-mime-magic"
    fi

    echo "$OPTIONS"
}

# Get the available PHP tags
sub_getversions() {
    cd $SOURCE

    git fetch origin --quiet
    git fetch origin --tags --quiet

    TAGS=()
    eval "$(git for-each-ref --shell --format='TAGS+=(%(refname))' refs/tags/)"
    for TAG in "${TAGS[@]}"; do
        # Only list PHP versions greater than or equal to 5.2
        PATTERN="refs/tags/php-[5-9]\.[2-9]"
        EXCLUDES="refs/tags/php-5\.2\.0.*"
        if [[ $TAG =~ $PATTERN ]] && ! [[ $TAG =~ $EXCLUDES ]] ; then
            VERSIONS+=(${TAG/refs\/tags\//})
        fi;
    done

    # Sort the tags
    VERSIONS=(
        $(for el in "${VERSIONS[@]}"
            do
                echo "$el"
            done | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n
        )
    )
}

# Convert a tag to a version string which we can use in comparisons
sub_getshortversion() {
    SHORT=$(echo $1 | sed -e 's/RC[0-9]*$//' -e 's/alpha[0-9]*$//' -e 's/beta[0-9]*$//')
    SHORT=${SHORT//[^0-9]/}

    if [[ ${#SHORT} -eq 3 ]] ; then
        SHORT="${SHORT:0:2}0${SHORT:2}"
    fi

    while [ ${#SHORT} -lt 4 ]
    do
        SHORT="${SHORT}0"
    done

    SHORT=$(printf "%04d" $SHORT)

    echo "$SHORT"
}

# Check if a value exists in an array
in_array() {
    local needle=$1

    for HAY in "${VERSIONS[@]}"; do
        [[ $HAY == $needle ]] && return 0
    done
    return 1
}

# Determine the command and execute
SUBCOMMAND=$1
case $SUBCOMMAND in
    "" | "-h" | "--help")
        usage
        ;;
    *)
        shift
        command_${SUBCOMMAND} $@
        if [ $? = 127 ]; then
            echo "Error: '$SUBCOMMAND' is not a known command!" >&2
            usage
        fi
        ;;
esac