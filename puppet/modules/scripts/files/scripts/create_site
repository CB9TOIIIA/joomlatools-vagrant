#!/usr/bin/env php
<?php

require_once 'Console/CommandLine.php';

CreateSite::fromInput();

class CreateSite
{
    public $templates = './create_site_files';

    public $site;
    public $template;

    public $source_tar;
    public $source_db;

    public $target_dir;
    public $target_db;

    public function __construct($site, $template, $symlink)
    {
        $this->site = $site;
        $this->template = $template;

        $this->source_tar = $this->templates.'/'.$this->template.'.tar.gz';
        $this->source_db  = $this->templates.'/'.$this->template.'.sql';

        $this->target_dir = '/var/www'.$this->site;
        $this->target_db  = 'sites_'.$this->site;
    }

    public static function fromInput()
    {
        $parser = new Console_CommandLine();
        $parser->description = "Install Joomla sites from templates";

        $parser->addArgument('site', array(
            'description' => 'Site name (used in the site URL as site.dev)',
            'help_name'   => 'SITE'
        ));

        $parser->addOption('template', array(
            'long_name'   => 'template',
            'default'     => 'joomla3',
            'description' => "Site template to build from (e.g. joomla25,joomla3)",
            'help_name'   => 'TEMPLATE'
        ));

        $parser->addOption('symlink', array(
            'long_name'   => 'symlink',
            'description' => "A comma separated list of folders to symlink from projects folder",
            'help_name'   => 'SYMLINK'
        ));

        try
        {
            $result   = $parser->parse();
            $site     = $result->args['site'];
            $template = $result->args['template'];

            $symlink  = $result->options['symlink'];

            $instance = new self($site, $template, $symlink);
            $instance->create();
        } catch (Exception $e) {
            $parser->displayError($e->getMessage());
        }
    }

    public function create()
    {
        try {
            $this->precheck();
            $this->createFolder();
            $this->createDatabase();
            $this->modifyConfiguration();
            $this->addVirtualHost();
        }
        catch (Exception $e) {
            $this->rollback();
            $this->error($e->getMessage());
        }
    }

    public function rollback() {}

    public function precheck()
    {
        if (!is_file($this->source_tar)) {
            throw new Exception(sprintf('Source files are missing for template %s', $this->template));
        }

        if (!is_file($this->source_db)) {
            throw new Exception(sprintf('Database export is missing for template %s', $this->template));
        }

        if (file_exists($this->target_dir)) {
            throw new Exception(sprintf('A site with name %s already exists', $this->site));
        }

        $result = `echo 'SHOW DATABASES LIKE "$this->target_db" | mysql -uroot -proot`;
        if (!empty($result)) { // Table exists
            throw new Exception(sprintf('A database with name %s already exists', $this->target_db));
        }
    }

    public function createFolder()
    {
        $result = `mkdir -p $this->target_dir; cd $this->target_dir; tar xzf $this->source_tar`;
    }

    public function createDatabase()
    {
        $result = `echo 'CREATE DATABASE $this->target_db CHARACTER SET utf8" | mysql -uroot -proot`;
        if (!empty($result)) { // MySQL returned an error
            throw new Exception(sprintf('Cannot create database %s. Error: %s', $this->target_db, $result));
        }

        $result = `mysql -proot -uroot $this->target_db < $this->source_db`;
        if (!empty($result)) { // MySQL returned an error
            throw new Exception(sprintf('Cannot import database. Error: %s', $result));
        }
    }

    public function modifyConfiguration()
    {
        $file     = $this->target_dir.'/configuration.php';
        $contents = file_get_contents($file);
        $replace  = function($name, $value, &$contents) {
            $pattern     = sprintf("#%s = '.*?'#", $name);
            $replacement = sprintf("%s = '%s'", $name, $value);

            $contents = preg_replace($pattern, $replacement, $contents);
        };

        $replace('db', $this->target_db, $contents);
        $replace('tmp_path', sprintf('/var/www/%s/tmp',  $this->site), $contents);
        $replace('log_path', sprintf('/var/www/%s/logs', $this->site), $contents);
        $replace('sitename', $this->site, $contents);

        chmod($file, 0644);
        file_put_contents($file, $contents);
    }

    public function addVirtualHost()
    {
        $tmpl = file_get_contents($this->templates.'/vhost.conf');
        $contents = sprintf($tmpl, $this->site);

        file_put_contents($this->templates.'/.vhost.tmp', $contents);

        `sudo tee /etc/apache2/sites-available/1-$this->site.conf < $this->templates/.vhost.tmp`;
        `sudo a2ensite 1-$this->site.conf`;
        `sudo /etc/init.d/apache2 restart > /dev/null 2>&1`;

        @unlink($this->templates.'/.vhost.tmp');
    }

    public function out($text = '', $nl = true)
    {
        fwrite(STDOUT, $text . ($nl ? "\n" : null));

        return $this;
    }

    public function error($text = '', $nl = true)
    {
        fwrite(STDERR, $text . ($nl ? "\n" : null));

        return $this;
    }
}