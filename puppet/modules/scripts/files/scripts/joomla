#!/usr/bin/env php
<?php

require_once 'Console/CommandLine.php';
require_once __DIR__.'/symlinker.php';

CreateSite::fromInput();

class CreateSite
{
    public static $templates;

    public $task;
    public $site;
    public $version;
    public $sample;
    public $type;
    public $symlink = array();

    public $source_db;
    public $source_tarball;

    public $target_dir;
    public $target_db;

    public $versions;

    public function __construct($task, $site, $version, $symlink, $sample)
    {
        if (!self::$templates) {
            self::$templates = __DIR__.'/joomla_files';
        }

        if (!in_array($task, array('create', 'delete', 'symlink'))) {
            throw new InvalidArgumentException('Invalid task: '.$task);
        }

        $this->task       = $task;
        $this->site       = $site;
        $this->version   = $version;

        if ($symlink) {
            $this->symlink = explode(',', $symlink);
        }

        if ($sample) {
            $this->sample = $sample;
        }

        if($version)
        {
            $versions = $this->getAvailableVersions();
            foreach($versions as $ref => $list)
            {
                if(in_array($this->version, $list)) {
                    $this->type = $ref;
                }
            }
        }

        $this->target_dir = '/var/www/'.$this->site;
        $this->target_db  = 'sites_'.$this->site;

        $this->source_db = $this->target_dir.'/installation/sql/mysql/joomla.sql';
    }

    public static function fromInput()
    {
        $parser = new Console_CommandLine();
        $parser->description = "Install Joomla sites straight from the Joomla Git repository";

        $parser->addArgument('task', array(
            'description' => 'create|delete|symlink',
            'help_name'   => 'TASK'
        ));

        $parser->addArgument('site', array(
            'description' => 'Alphanumeric site name. Also used in the site URL with .dev domain',
            'help_name'   => 'SITE'
        ));

        $parser->addOption('version', array(
            'long_name'   => '--version',
            'description' => "Joomla version to build from. Either a version number (2, 3.2, or latest) or a branch from the Joomla Git repository.",
            'help_name'   => 'TEMPLATE'
        ));

        $parser->addOption('symlink', array(
            'long_name'   => '--symlink',
            'description' => "A comma separated list of folders to symlink from projects folder",
            'help_name'   => 'SYMLINK'
        ));

        $parser->addOption('sample', array(
            'long_name'   => '--sample',
            'description' => "Sample data to install (default|blog|brochure|learn|testing)",
            'help_name'   => 'SAMPLE'
        ));

        try
        {
            $result   = $parser->parse();
            $task     = $result->args['task'];
            $site     = $result->args['site'];

            $version = $result->options['version'];
            $symlink  = $result->options['symlink'];
            $sample  = $result->options['sample'];

            $instance = new self($task, $site, $version, $symlink, $sample);
            $instance->run();
        } catch (Exception $e) {
            $parser->displayError($e->getMessage());
        }
    }

    public function run()
    {
        try {
            $this->precheck();

            $task = $this->task;
            $this->$task();
        }
        catch (Exception $e) {
            $this->error($e->getMessage());
        }
    }

    public function create()
    {
        $this->createFolder();
        $this->createDatabase();
        $this->modifyConfiguration();
        $this->addVirtualHost();
        $this->symlinkProjects();
    }

    public function delete()
    {
        $this->deleteFolder();
        $this->deleteVirtualHost();
        $this->deleteDatabase();
    }

    public function symlink()
    {
        $this->symlinkProjects();
    }

    public function precheck()
    {
        if ($this->task === 'create')
        {
            if (file_exists($this->target_dir)) {
                throw new Exception(sprintf('A site with name %s already exists', $this->site));
            }

            $this->checkVersion();

            if ($this->version)
            {
                if(!in_array($this->type, array('tags', 'heads'))) {
                    throw new Exception(sprintf('Version %s not found. Check https://github.com/joomla/joomla-cms for a list of valid tags and branch names.', $this->version));
                }

                $result = `echo 'SHOW DATABASES LIKE "$this->target_db"' | mysql -uroot -proot`;
                if (!empty($result)) { // Table exists
                    throw new Exception(sprintf('A database with name %s already exists', $this->target_db));
                }

                $this->source_tarball = $this->getTarball();
                if(!file_exists($this->source_tarball)) {
                    throw new Exception(sprintf('File %s does not exist', $this->source_tarball));
                }
            }

            if ($this->version && $this->sample)
            {
                if (!in_array($this->sample, array('default', 'blog', 'brochure', 'testing', 'learn'))) {
                    throw new Exception(sprintf('Unknown sample data "%s"', $this->sample));
                }

                if(is_numeric(substr($this->version, 0, 1)))
                {
                    if (in_array($this->sample, array('testing', 'learn')) && version_compare($this->version, '3.0.0', '<')) {
                        throw new Exception(sprintf('%s does not support sample data %s', $this->version, $this->sample));
                    }
                }
            }
        }
        elseif ($this->task === 'symlink')
        {
            if (!file_exists($this->target_dir)) {
                throw new Exception(sprintf('Site not found: %s', $this->site));
            }
        }
    }

    public function createFolder()
    {
        `mkdir -p $this->target_dir`;

        if ($this->version) {
            `cd $this->target_dir; tar xzf $this->source_tarball --strip 1`;
        }
    }

    public function deleteFolder()
    {
        `rm -rf $this->target_dir`;
    }

    public function createDatabase()
    {
        if (!$this->version) {
            return;
        }

        $result = `echo 'CREATE DATABASE $this->target_db CHARACTER SET utf8' | mysql -uroot -proot`;
        if (!empty($result)) { // MySQL returned an error
            throw new Exception(sprintf('Cannot create database %s. Error: %s', $this->target_db, $result));
        }

        $imports = array($this->target_dir.'/installation/sql/mysql/joomla.sql');

        $users = 'joomla3.users.sql';
        if(is_numeric(substr($this->version, 0, 1)) && version_compare($this->version, '3.0.0', '<')) {
            $users = 'joomla2.users.sql';
        }

        $imports[] = self::$templates.'/'.$users;

        if ($this->sample)
        {
            $type = $this->sample == 'default' ? 'data' : $this->sample;
            $sample_db = $this->target_dir.'/installation/sql/mysql/sample_' . $type . '.sql';

            $imports[] = $sample_db;
        }

        foreach($imports as $import)
        {
            $file = basename($import);

            `sed -i 's/#__/j_/g' $import`;

            $result = `mysql -proot -uroot $this->target_db < $import`;
            if (!empty($result)) { // MySQL returned an error
                throw new Exception(sprintf('Cannot import database "%s". Error: %s', $file, $result));
            }
        }
    }

    public function deleteDatabase()
    {
        $result = `echo 'DROP DATABASE IF EXISTS $this->target_db' | mysql -uroot -proot`;
        if (!empty($result)) { // MySQL returned an error
            throw new Exception(sprintf('Cannot delete database %s. Error: %s', $this->target_db, $result));
        }
    }

    public function modifyConfiguration()
    {
        if (!$this->version) {
            return;
        }

        $source   = $this->target_dir.'/installation/configuration.php-dist';
        $target   = $this->target_dir.'/configuration.php';

        $contents = file_get_contents($source);
        $replace  = function($name, $value, &$contents) {
            $pattern     = sprintf("#%s = '.*?'#", $name);
            $replacement = sprintf("%s = '%s'", $name, $value);

            $contents = preg_replace($pattern, $replacement, $contents);
        };

        $remove  = function($name, &$contents) {
            $pattern     = sprintf("#public \$%s = '.*?'#", $name);

            $contents = preg_replace($pattern, '', $contents);
        };

        $replacements = array(
            'db'        => $this->target_db,
            'user'      => 'root',
            'password'  => 'root',
            'dbprefix'  => 'j_',
            'dbtype'    => 'mysqli',

            'mailer' => 'smtp',
            'mailfrom' => 'admin@example.com',
            'fromname' => $this->site,
            'sendmail' => '/usr/bin/env catchmail',
            'smtpauth' => '0',
            'smtpuser' => '',
            'smtppass' => '',
            'smtphost' => 'localhost',
            'smtpsecure' => 'none',
            'smtpport' => '1025',

            'sef'       => '1',
            'sef_rewrite'   => '1',
            'unicodeslugs'  => '1',

            'debug'     => '1',
            'lifetime'  => '600',
            'tmp_path'  => sprintf('/var/www/%s/tmp',  $this->site),
            'log_path'  => sprintf('/var/www/%s/logs', $this->site),
            'sitename'  => $this->site
        );

        foreach($replacements as $key => $value) {
            $replace($key, $value, $contents);
        }

        $remove('root_user', $contents);

        file_put_contents($target, $contents);
        chmod($target, 0644);

        `mv $this->target_dir/installation $this->target_dir/_installation`;
        `cp $this->target_dir/htaccess.txt $this->target_dir/.htaccess`;
    }

    public function addVirtualHost()
    {
        $template = file_get_contents(self::$templates.'/vhost.conf');
        $contents = sprintf($template, $this->site);

        $tmp = self::$templates.'/.vhost.tmp';

        file_put_contents($tmp, $contents);

        `sudo tee /etc/apache2/sites-available/1-$this->site.conf < $tmp`;
        `sudo a2ensite 1-$this->site.conf`;
        `sudo /etc/init.d/apache2 restart > /dev/null 2>&1`;

        @unlink($tmp);
    }

    public function deleteVirtualHost()
    {
        `sudo a2dissite 1-$this->site.conf`;
        `sudo rm -f /etc/apache2/sites-available/1-$this->site.conf`;
        `sudo /etc/init.d/apache2 restart > /dev/null 2>&1`;
    }

    public function symlinkProjects()
    {
        static $dependencies = array(
            'extman'  => array('koowa'),
            'docman'  => array('extman', 'koowa', 'com_files'),
            'fileman' => array('extman', 'koowa', 'com_files'),
            'logman'  => array('extman', 'koowa', 'com_activities')
        );
        $project_folder = '/home/vagrant/Projects';
        $destination    = $this->target_dir;

        $projects = array();
        foreach ($this->symlink as $symlink)
        {
            $projects[] = $symlink;
            if (array_key_exists($symlink, $dependencies)) {
                $projects = array_merge($projects, $dependencies[$symlink]);
            }
        }

        // If we are symlinking Koowa, we need to create this structure to allow multiple symlinks in them
        if (in_array('koowa', $projects))
        {
            $dirs = array($this->target_dir.'/libraries/koowa/components', $this->target_dir.'/media/koowa');
            foreach ($dirs as $dir)
            {
                if (!is_dir($dir)) {
                    mkdir($dir, 0777, true);
                }
            }
        }

        foreach ($projects as $project)
        {
            $root = $project_folder.'/'.$project;
            if (!is_dir($root))
            {
                $this->error('Project not found: '.$project);
                continue;
            }

            if (is_dir($root.'/code')) {
                $root = $root.'/code';
            }

            $it = new JoomlaSymlinker($root, $destination);
            while($it->valid()) {
                $it->next();
            }
        }
    }

    public function out($text = '', $nl = true)
    {
        fwrite(STDOUT, $text . ($nl ? "\n" : null));

        return $this;
    }

    public function error($text = '', $nl = true)
    {
        fwrite(STDERR, $text . ($nl ? "\n" : null));

        return $this;
    }

    public function getTarball()
    {
        $tar = $this->version.'.tar.gz';

        if(file_exists(self::$templates.'/'.$tar) && $this->type != 'heads') {
            return self::$templates.'/'.$tar;
        }

        switch($this->type)
        {
            case 'heads':
                $url = 'http://github.com/joomla/joomla-cms/tarball/'.$this->version;
                break;
            case 'tags':
            default:
                $url = 'https://github.com/joomla/joomla-cms/archive/'.$tar;
                break;
        }

        echo "Downloading Joomla $this->version - this could take a few minutes .." . PHP_EOL;
        $bytes = file_put_contents(self::$templates.'/'.$tar, fopen($url, 'r'));
        if($bytes === false || $bytes == 0) {
            throw new Exception(sprintf('Failed to download %s', $url));
        }

        return self::$templates.'/'.$tar;
    }

    public function checkVersion()
    {
        if (strtolower($this->version) == 'latest')
        {
            $this->version = $this->getLatestRelease();
            $this->type = 'tags';
        }

        $length = strlen($this->version);
        $format = is_numeric($this->version) || preg_match('/^\d\.\d+$/im', $this->version);

        if ( ($length == 1 || $length == 3) && $format)
        {
            $prefix = $this->version;

            $this->version = $this->getLatestRelease($prefix);
            $this->type    = 'tags';

            if($this->version == '0.0.0') {
                $this->version = $prefix . ($length == 1 ? '.0.0' : '.0');
            }
        }
    }

    public function getAvailableVersions()
    {
        if(!$this->versions)
        {
            $result = `git ls-remote https://github.com/joomla/joomla-cms.git | grep -E 'refs/(tags|heads)' | grep -v '{}'`;
            $refs   = explode(PHP_EOL, $result);

            $versions = array();
            $pattern  = '/^[a-z0-9]+\s+refs\/(heads|tags)\/([a-z0-9\.\-_]+)$/im';
            foreach($refs as $ref)
            {
                if(preg_match($pattern, $ref, $matches))
                {
                    $type = isset($versions[$matches[1]]) ? $versions[$matches[1]] : array();

                    if($matches[2] == '1.7.3' || substr($matches[2], 0, 4) == 'vPBF' || substr($matches[2], 0, 6) == 'search') {
                        continue;
                    }

                    $type[] = $matches[2];
                    $versions[$matches[1]] = $type;
                }
            }

            $this->versions = $versions;
        }

        return $this->versions;
    }

    public function getLatestRelease($prefix = null)
    {
        // Find the latest tag
        $latest = '0.0.0';
        $versions = $this->getAvailableVersions();

        foreach($versions['tags'] as $version)
        {
            if(!preg_match('/\d\.\d+\.\d+.*/im', $version)) {
                continue;
            }

            if(!is_null($prefix) && substr($version, 0, strlen($prefix)) != $prefix) {
                continue;
            }

            if(version_compare($latest, strtolower($version), '<')) {
                $latest = $version;
            }
        }

        return $latest;
    }
}